% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/select.R
\name{select}
\alias{select}
\title{Selects Regression Variables using a Genetic Algorithm}
\usage{
select(x, y, model = list("glm"), fitMetric = "AIC", maxGen = 200L,
  minGen = 10L, gaMethod = list("TN", 5), pop = 100L, pMutate = 0.1,
  crossParams = c(0.8, 1L), eliteRate = 0.1)
}
\arguments{
\item{x}{matrix of dimension n * p}

\item{y}{vector of length n or a matrix with n rows}

\item{model}{list - default "glm" : one of ("lm", "glm") and an optional character string specifying arguments into lm.fit() or glm.fit()}

\item{fitMetric}{default "AIC": one of ("AIC", "BIC") or a function that takes a regression object and outputs a single number to be maximized}

\item{maxGen}{default 200: integer specifying the maximum number of GA generations to use}

\item{minGen}{default 10: integer specifying the number of generations without fitness improvement at which the GA algorithm will stop}

\item{gaMethod}{list - default 'LR': one of ('TN', 'LR', 'ER','RW') and an additional numrical argument as needed. See gaSelection for details.}

\item{pop}{default 100: integer specifying the size of the genotype pool.}

\item{pMutate}{default 0.1: real number between 0 and 1 specifying the probability of an allele mutation}

\item{crossParams}{numeric - default (.8, 1): c("cross probability", "max number of cross locations on a single gene")}

\item{eliteRate}{default 0.1: Proportion of highest fitness genotypes that pass into the next generation unchanged.}
}
\value{
returns a list of 4 components: optimum, fitPlot, fitStats, and GA
\itemize{
\item{\strong{optimum:} a list of properties of the genotype acheiving max fitness}{
\itemize{
\item \emph{\strong{variables:}} the recommended set of regression variables
\item \emph{\strong{fitness:}} the achieved fitness metric
\item \emph{\strong{fitModel:}} the regression object returned by using the recommended variables
}}
\item{\strong{fitPlot:} a plot of the mean, median, and maximum fitness over the generations}
\item{\strong{fitStats:} a tibble of the values used to generate the plot}
\item{\strong{GA:} a list of data associated with each generation of the genetic algorithm}{
\itemize{
\item \emph{\strong{fitness:}} the fitness measures of the current generation
\item \emph{\strong{elites:}} the fitness values and genotypes with the highest fitness
}}
}
}
\description{
Recommends regression variables by maximizing a fitness criteria using genetic algorithms
}
\examples{
x <- as.matrix(read.table("data/baseball.dat", header = TRUE))[, -1]
y <- as.matrix(read.table("data/baseball.dat", header = TRUE))[, 1]

# linear regression using roulette wheel parent selection
GA <- select(X, Y, model = list("lm"), gaMethod = list("RW"))

# to return just the selected regression variables
GA$optimum$variables

# to return the regression object using the selected variables
GA$optimum$fitModel

# generalized linear regression with binomial family using tournament selection
GA <- select(X, Y, model = list("glm", "family = poisson()"))

# code for generated data linear regression example
x <- as.matrix(read.table("./data/LRdataTest"), header = TRUE)[, -1]
y <- as.matrix(read.table("./data/LRdataTest"), header = TRUE)[, 1]
n = 50
out <- sapply(1:n, FUN = function {select(x, y)$optimum})
coeffs <- sapply(seq(3, 3*n, 3), FUN = function(i) out[[i]]$coefficients)
weights <- c(unlist(sapply(1:n, FUN = function(i) coeffs[[i]])))
weights <- sapply(colnames(x), FUN = function(name) sum(abs(weights[names(weights)==name])))
barplot(weights)

vars <- out[[1]]
varCoeffs <- out[[3]]$coefficients

# Code for the baseball dataset example
maxFits <- matrix(0, 4, 4)
maxIters <- matrix(0, 4, 4)
method <- list(list('TN', 5), list('LR'), list('ER', 0.5), list('RW'))
fit <- c("AIC", "BIC")

for (i in 1:4) {
  for (j in 1:2) {
      trial <- GA::select(x, y, model = list("lm"), fitMetric = fit[j], maxGen = 500L, minGen = 50L,
                              gaMethod = method[[i]], pop = 500L, pMutate = 0.1, crossParams = c(0.8, 1L), eliteRate = 0.1)
      iters <- length(trial$GA)
      bestFit <- eval(parse(text = paste0("trial$GA$gen", iters, "$elites[1,1]")))
      maxFits[i,j] <- bestFit
      maxIters[i,j] <- iters
  }
  for (j in 3:4) {
      trial <- GA::select(x, y, model = list("glm"), fitMetric = fit[j-2], maxGen = 500L, minGen = 50L,
                          gaMethod = method[[i]], pop = 500L, pMutate = 0.1, crossParams = c(0.8, 1L), eliteRate = 0.1)
   iters <- length(trial$GA)
   bestFit <- eval(parse(text = paste0("trial$GA$gen", iters, "$elites[1,1]")))
   maxFits[i,j] <- bestFit
   maxIters[i,j] <- iters
   }
}
}
\seealso{
\code{\link{regress}}
\code{\link{mate}}
\code{\link{evolve}}
}
